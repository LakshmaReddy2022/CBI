"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getItem = getItem;
exports.useItem = useItem;
exports.CacheContext = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _mapGetWithDefault = _interopRequireDefault(require("@postinumero/map-get-with-default"));

var _fastJsonStableStringify = _interopRequireDefault(require("fast-json-stable-stringify"));

var _memoizee = _interopRequireDefault(require("memoizee"));

var _react = require("react");

var globalCache = new WeakMap();

function getItem(func, config, args) {
  var cache = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : globalCache;
  return (0, _mapGetWithDefault.default)((0, _mapGetWithDefault.default)(cache, func, function () {
    return new WeakMap();
  }), config, function () {
    return (0, _memoizee.default)(function () {
      return {
        updaters: new Set()
      };
    }, (0, _objectSpread2.default)({
      length: false,
      normalizer: _fastJsonStableStringify.default
    }, config));
  }).apply(void 0, (0, _toConsumableArray2.default)(args));
}

function removeItem(func, config, args) {
  var _cache$get$get;

  var cache = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : globalCache;

  (_cache$get$get = cache.get(func).get(config)).delete.apply(_cache$get$get, (0, _toConsumableArray2.default)(args));
}

var CacheContext = /*#__PURE__*/(0, _react.createContext)(globalCache);
exports.CacheContext = CacheContext;

function useItem() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var cache = (0, _react.useContext)(CacheContext);
  var memoized = getItem.apply(void 0, args.concat([cache]));
  (0, _react.useEffect)(function () {
    var updaters = memoized.updaters,
        cleanupTimeout = memoized.cleanupTimeout;

    if (cleanupTimeout) {
      clearTimeout(cleanupTimeout);
    }

    return function () {
      memoized.cleanupTimeout = setTimeout(function () {
        if (!updaters.size) {
          var _memoized$cancel;

          (_memoized$cancel = memoized.cancel) === null || _memoized$cancel === void 0 ? void 0 : _memoized$cancel.call(memoized);
          removeItem.apply(void 0, args.concat([cache]));
        }
      }, 0);
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [memoized]);
  return memoized;
}
//# sourceMappingURL=cache.js.map