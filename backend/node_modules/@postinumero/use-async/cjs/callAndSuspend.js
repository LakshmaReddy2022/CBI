"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = callAndSuspend;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _callAsyncIterator = _interopRequireDefault(require("./callAsyncIterator.js"));

var _callSafe = _interopRequireDefault(require("./utils/callSafe.js"));

var _isAsyncIterator = _interopRequireDefault(require("./utils/isAsyncIterator.js"));

function call(args, memoized) {
  var _args = (0, _slicedToArray2.default)(args, 3),
      func = _args[0],
      funcArgs = _args[2];

  if (memoized.cancel) {
    memoized.cancel();
  }

  var result = func.apply(void 0, (0, _toConsumableArray2.default)(funcArgs));
  return (0, _isAsyncIterator.default)(result) ? (0, _callAsyncIterator.default)(result, memoized) : result;
}

function createSuspenderAndCall(_x, _x2) {
  return _createSuspenderAndCall.apply(this, arguments);
}

function _createSuspenderAndCall() {
  _createSuspenderAndCall = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(args, memoized) {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _callSafe.default)(call, args, memoized);

          case 2:
            memoized.value = _context.sent;

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _createSuspenderAndCall.apply(this, arguments);
}

function callAndSuspend(args, memoized) {
  return memoized.suspender = createSuspenderAndCall(args, memoized);
}
//# sourceMappingURL=callAndSuspend.js.map