import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import get from '@postinumero/map-get-with-default';
import stringify from 'fast-json-stable-stringify';
import memoize from 'memoizee';
import { createContext, useContext, useEffect } from 'react';
var globalCache = new WeakMap();
export function getItem(func, config, args) {
  var cache = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : globalCache;
  return get(get(cache, func, function () {
    return new WeakMap();
  }), config, function () {
    return memoize(function () {
      return {
        updaters: new Set()
      };
    }, _objectSpread({
      length: false,
      normalizer: stringify
    }, config));
  }).apply(void 0, _toConsumableArray(args));
}

function removeItem(func, config, args) {
  var _cache$get$get;

  var cache = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : globalCache;

  (_cache$get$get = cache.get(func).get(config)).delete.apply(_cache$get$get, _toConsumableArray(args));
}

export var CacheContext = /*#__PURE__*/createContext(globalCache);
export function useItem() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var cache = useContext(CacheContext);
  var memoized = getItem.apply(void 0, args.concat([cache]));
  useEffect(function () {
    var updaters = memoized.updaters,
        cleanupTimeout = memoized.cleanupTimeout;

    if (cleanupTimeout) {
      clearTimeout(cleanupTimeout);
    }

    return function () {
      memoized.cleanupTimeout = setTimeout(function () {
        if (!updaters.size) {
          var _memoized$cancel;

          (_memoized$cancel = memoized.cancel) === null || _memoized$cancel === void 0 ? void 0 : _memoized$cancel.call(memoized);
          removeItem.apply(void 0, args.concat([cache]));
        }
      }, 0);
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [memoized]);
  return memoized;
}
//# sourceMappingURL=cache.js.map