import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import callAsyncIterator from './callAsyncIterator.js';
import callSafe from './utils/callSafe.js';
import isAsyncIterator from './utils/isAsyncIterator.js';

function call(args, memoized) {
  var _args = _slicedToArray(args, 3),
      func = _args[0],
      funcArgs = _args[2];

  if (memoized.cancel) {
    memoized.cancel();
  }

  var result = func.apply(void 0, _toConsumableArray(funcArgs));
  return isAsyncIterator(result) ? callAsyncIterator(result, memoized) : result;
}

function createSuspenderAndCall(_x, _x2) {
  return _createSuspenderAndCall.apply(this, arguments);
}

function _createSuspenderAndCall() {
  _createSuspenderAndCall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(args, memoized) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return callSafe(call, args, memoized);

          case 2:
            memoized.value = _context.sent;

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _createSuspenderAndCall.apply(this, arguments);
}

export default function callAndSuspend(args, memoized) {
  return memoized.suspender = createSuspenderAndCall(args, memoized);
}
//# sourceMappingURL=callAndSuspend.js.map