{"version":3,"sources":["../src/callAsyncIterator.js"],"names":["updateEach","callAsyncIterator","asyncIterator","memoized","Promise","resolve","reject","cancel","return","isPending","value"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AAEA,eAAe,SAASC,iBAAT,CAA2BC,aAA3B,EAA0CC,QAA1C,EAAoD;AACjE,SAAO,IAAIC,OAAJ;AAAA,wEAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjBH,cAAAA,QAAQ,CAACI,MAAT,GAAkB;AAAA,uBAAML,aAAa,CAACM,MAAd,EAAN;AAAA,eAAlB;;AACIC,cAAAA,SAFa,GAED,IAFC;AAAA;AAAA;AAAA;AAAA;AAAA,yCAIWP,aAJX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIEQ,cAAAA,KAJF;;AAKb,kBAAID,SAAJ,EAAe;AACbA,gBAAAA,SAAS,GAAG,KAAZ;AACAJ,gBAAAA,OAAO,CAACK,KAAD,CAAP;AACD,eAHD,MAGO;AACLP,gBAAAA,QAAQ,CAACO,KAAT,GAAiB,CAAC,IAAD,EAAOA,KAAP,CAAjB;AACAV,gBAAAA,UAAU,CAACG,QAAD,CAAV;AACD;;AAXY;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAcf,kBAAIM,SAAJ,EAAe;AACbA,gBAAAA,SAAS,GAAG,KAAZ;AACAH,gBAAAA,MAAM,aAAN;AACD,eAHD,MAGO;AACLH,gBAAAA,QAAQ,CAACO,KAAT,GAAiB,aAAjB;AACAV,gBAAAA,UAAU,CAACG,QAAD,CAAV;AACD;;AApBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AAuBD","sourcesContent":["import updateEach from './updateEach.js';\n\nexport default function callAsyncIterator(asyncIterator, memoized) {\n  return new Promise(async (resolve, reject) => {\n    memoized.cancel = () => asyncIterator.return();\n    let isPending = true;\n    try {\n      for await (const value of asyncIterator) {\n        if (isPending) {\n          isPending = false;\n          resolve(value);\n        } else {\n          memoized.value = [null, value];\n          updateEach(memoized);\n        }\n      }\n    } catch (error) {\n      if (isPending) {\n        isPending = false;\n        reject(error);\n      } else {\n        memoized.value = [error];\n        updateEach(memoized);\n      }\n    }\n  });\n}\n"],"file":"callAsyncIterator.js"}