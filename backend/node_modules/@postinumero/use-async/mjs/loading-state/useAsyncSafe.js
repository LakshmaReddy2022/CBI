import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import useUpdate from 'react-use/lib/useUpdate.js';
import normalizeArgs from '../normalizeArgs.js';
import useAsyncSafeSuspense from '../useAsyncSafe.js';
export default normalizeArgs(function useAsyncSafe() {
  var update = useUpdate();

  try {
    var _useAsyncSafeSuspense = useAsyncSafeSuspense.apply(void 0, arguments),
        _useAsyncSafeSuspense2 = _slicedToArray(_useAsyncSafeSuspense, 2),
        error = _useAsyncSafeSuspense2[0],
        data = _useAsyncSafeSuspense2[1];

    return {
      isLoading: false,
      data: data,
      error: error
    };
  } catch (suspender) {
    suspender.finally(update);
    return {
      isLoading: true
    };
  }
});
//# sourceMappingURL=useAsyncSafe.js.map