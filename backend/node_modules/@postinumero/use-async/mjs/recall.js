import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import { getItem } from './cache.js';
import normalizeArgs from './normalizeArgs.js';
import callAndSuspend from './callAndSuspend.js';
import updateEach from './updateEach.js';
export default normalizeArgs( /*#__PURE__*/function () {
  var _recall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var _len,
        args,
        _key,
        memoized,
        _args = arguments;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = _args[_key];
            }

            memoized = getItem.apply(void 0, args);

            if (!memoized.updaters.size) {
              _context.next = 6;
              break;
            }

            _context.next = 5;
            return callAndSuspend(args, memoized);

          case 5:
            updateEach(memoized);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  function recall() {
    return _recall.apply(this, arguments);
  }

  return recall;
}());
//# sourceMappingURL=recall.js.map