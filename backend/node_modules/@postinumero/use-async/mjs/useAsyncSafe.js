import { useItem } from './cache.js';
import normalizeArgs from './normalizeArgs.js';
import callAndSuspend from './callAndSuspend.js';
import useUpdaters from './useUpdaters.js';
export default normalizeArgs(function useAsyncSafe() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var memoized = useItem.apply(void 0, args);
  useUpdaters(memoized, args);

  if (memoized.value) {
    return memoized.value;
  }

  if (!memoized.suspender) {
    callAndSuspend(args, memoized);
  }

  throw memoized.suspender;
});
//# sourceMappingURL=useAsyncSafe.js.map