import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
export default function callSafe(_x) {
  return _callSafe.apply(this, arguments);
}

function _callSafe() {
  _callSafe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fn) {
    var _len,
        args,
        _key,
        _args = arguments;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;

            for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = _args[_key];
            }

            _context.next = 4;
            return fn.call.apply(fn, [this].concat(args));

          case 4:
            _context.t0 = _context.sent;
            return _context.abrupt("return", [null, _context.t0]);

          case 8:
            _context.prev = 8;
            _context.t1 = _context["catch"](0);
            return _context.abrupt("return", [_context.t1]);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 8]]);
  }));
  return _callSafe.apply(this, arguments);
}
//# sourceMappingURL=callSafe.js.map